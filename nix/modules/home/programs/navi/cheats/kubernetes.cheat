% kubernetes, k8s

# Get pods in namespace
kubectl -n <namespace> --kubeconfig <kubeconfig> get pods

# Describe pod
kubectl -n <namespace> --kubeconfig <kubeconfig> describe pod <pod-name>

# Get pod logs
kubectl -n <namespace> --kubeconfig <kubeconfig> logs <pod-name>

# Follow pod logs
kubectl -n <namespace> --kubeconfig <kubeconfig> logs -f --tail 0 <pod-name>

# Get pod logs (previous container)
kubectl -n <namespace> --kubeconfig <kubeconfig> logs <pod-name> --previous

# Execute command in pod
kubectl -n <namespace> --kubeconfig <kubeconfig> exec -it <pod-name> -- <command>

# Get env from pod
kubectl -n <namespace> --kubeconfig <kubeconfig> exec -it <pod-name> -- env

# Get shell in pod
kubectl -n <namespace> --kubeconfig <kubeconfig> exec -it <pod-name> -- /bin/sh

# Port forward to pod
kubectl -n <namespace> --kubeconfig <kubeconfig> port-forward <pod-name> <local-port>:<pod-port>

# Get deployments
kubectl -n <namespace> --kubeconfig <kubeconfig> get deployments

# Scale deployment
kubectl -n <namespace> --kubeconfig <kubeconfig> scale deployment <deployment-name> --replicas=<count>

# Follow deployment logs (single)
kubectl -n <namespace> --kubeconfig <kubeconfig> logs -f --tail 10 deployment/<deployment-name>

# Follow deployment logs (all)
kubectl -n <namespace> --kubeconfig <kubeconfig> logs -f --tail 10 --all-pods=true --max-log-requests=30 deployment/<deployment-name>

# Rollout status of deployment
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout status deployment/<deployment-name>

# Rollback deployment
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout undo deployment/<deployment-name>

# Rollback to specific revision
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout undo deployment/<deployment-name> --to-revision=<revision>

# Pause deployment rollout
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout pause deployment/<deployment-name>

# Resume deployment rollout
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout resume deployment/<deployment-name>

# View rollout history
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout history deployment/<deployment-name>

# Restart deployment (rolling restart)
kubectl -n <namespace> --kubeconfig <kubeconfig> rollout restart deployment/<deployment-name>

# Get services
kubectl -n <namespace> --kubeconfig <kubeconfig> get services

# Get nodes
kubectl --kubeconfig <kubeconfig> get nodes

# Get events
kubectl -n <namespace> --kubeconfig <kubeconfig> get events

# Get configmaps
kubectl -n <namespace> --kubeconfig <kubeconfig> get configmaps

# List secrets
kubectl -n <namespace> --kubeconfig <kubeconfig> get secrets

# Get decoded secret
<namespace>; <kubeconfig> echo <secret-entry> | base64 -d

# Apply manifest
kubectl --kubeconfig <kubeconfig> apply -f <manifest-file>

# Delete resource
kubectl --kubeconfig <kubeconfig> delete -f <manifest-file>

# Get resource usage
kubectl -n <namespace> --kubeconfig <kubeconfig> top pod

# Get cluster info
kubectl --kubeconfig <kubeconfig> cluster-info

# Switch context
kubectl --kubeconfig <kubeconfig> config use-context <context-name>

# Get current context
kubectl --kubeconfig <kubeconfig> config current-context

# List contexts
kubectl --kubeconfig <kubeconfig> config get-contexts

# Create namespace
kubectl --kubeconfig <kubeconfig> create namespace <namespace>

# Get persistent volumes
kubectl --kubeconfig <kubeconfig> get pv

# Get persistent volume claims
kubectl -n <namespace> --kubeconfig <kubeconfig> get pvc

$ namespace: echo -e "das-v2-mainnet-fra\ndas-v2-mainnet-pitt\ndas-v2-devnet-pitt\ndas-devnet-pitt"
$ kubeconfig: [[ "$namespace" == *"pitt"* ]] && echo ~/.kube/photon-pitt.yml || echo ~/.kube/photon-fra.yml
$ pod-name: kubectl get pods -n "$namespace" --kubeconfig "$kubeconfig" --- --headers 1 --column 1
$ deployment-name: kubectl --kubeconfig="$kubeconfig" get deployments -n="$namespace" --- --headers 1 --column 1
$ context-name: kubectl config get-contexts -o name --kubeconfig "$kubeconfig"
$ manifest-file: ls *.{yaml,yml} 2>/dev/null || true
$ config-files: ls ~/.kube | grep .yml
$ secret: kubectl get secrets -n=$namespace --kubeconfig=$kubeconfig --- --headers 1 --column 1
$ secret-entry: kubectl get secrets -n=$namespace $secret -o yaml --kubeconfig=$kubeconfig | yq -r '.data | to_entries | .[] | [.key, .value] | @tsv' --- --column 2 --delimiter '\t'
